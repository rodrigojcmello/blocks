env:
  node: true

extends:
  - airbnb-base
  - plugin:prettier/recommended
  - plugin:unicorn/recommended

overrides:
  - files:
      - '**/*.ts'
      - '**/*.tsx'

    env:
      browser: true
      es2020: true
      jest: true
      node: false

    parser: '@typescript-eslint/parser'

    parserOptions:
      # TypeScript
      project: tsconfig.json

      # JavaScript
      ecmaVersion: 2021
      sourceType: module

      # React
      ecmaFeatures:
        jsx: true

    extends:
      # JavaScript and React
      - airbnb
      - airbnb/hooks
      - plugin:unicorn/recommended

      # Jest-dom
      - plugin:jest-dom/recommended

      # TypeScript
      - 'plugin:@typescript-eslint/recommended'
      # - 'plugin:@typescript-eslint/recommended-requiring-type-checking'
      - plugin:import/typescript

      # Prettier
      - plugin:prettier/recommended
      - prettier/react
      - 'prettier/@typescript-eslint'

    rules:
      # ------------------------------------------------------------------------
      # JavaScript
      # ------------------------------------------------------------------------

      # Maximum 300 lines in a file
      max-lines: error

      # TypeScript validates it
      # no-use-before-define: off

      no-restricted-syntax: off

      # Unicorn deal with it
      '@typescript-eslint/prefer-regexp-exec': off

      # It is much more practical to let the developer choose how he wants to export. This rule is very generic, a file is often used to create utilities and starts with just one method, adding more methods later, keeping it as export default only generates a boring and manual refactoring of subsequent imports
      'import/prefer-default-export': off

      # ------------------------------------------------------------------------
      # Unicorn
      # ------------------------------------------------------------------------

      # Abbreviations are commonly known, so there is no need to avoid them
      unicorn/prevent-abbreviations: off

      # Enable pascalCase for React components
      unicorn/filename-case:
        - error
        - cases:
            kebabCase: true
            pascalCase: true
            camelCase: true

      # ------------------------------------------------------------------------
      # React
      # ------------------------------------------------------------------------

      # Enable tsx files for React components
      react/jsx-filename-extension:
        - error
        - extensions:
            - '.tsx'

      # Not required in React 17
      react/react-in-jsx-scope: off

      # JSX Spread Attributes have an interface in TypeScript that helps us
      #  to identify their values
      react/jsx-props-no-spreading: off

      # Unnecessary with TypeScript
      react/prop-types: off
      react/require-default-props: off

      # ------------------------------------------------------------------------
      # Import
      # ------------------------------------------------------------------------

      # Resolves TypeScript extensions
      import/extensions:
        - error
        - extensions:
            - '.ts'
            - '.tsx'

      # Import exception to tests
      import/no-extraneous-dependencies:
        - error
        - devDependencies:
            - '**/*.test.tsx'
            - '**/setupTests.ts'
